// src/database/seed.ts
import dotenv from 'dotenv';
dotenv.config();

import bcrypt from 'bcryptjs';
import { initDatabase, pool } from './init';
import { RowDataPacket } from 'mysql2';

type Row = RowDataPacket & {
  id?: string | null;
};

const COORDINATORS = [
  { name: 'Hadi', email: 'hadi@coordinator.com', password: 'coordinator123', role: 'coordinator' },
  { name: 'Nouman', email: 'nouman@coordinator.com', password: 'coordinator123', role: 'coordinator' },
  { name: 'Naveed', email: 'naveed@coordinator.com', password: 'coordinator123', role: 'coordinator' }
];

const generateReferralCode = (): string => {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  let result = '';
  for (let i = 0; i < 8; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
};

export const seedDatabase = async () => {
  // Ensure DB connection
  await initDatabase({ isMigration: true });

  const conn = await pool.getConnection();
  try {
    await conn.beginTransaction();
    console.log('🌱 Seeding database (MariaDB) ...');

    // Helper: get user id by email
    const getUserIdByEmail = async (email: string): Promise<string | null> => {
      const [rows] = await conn.query<Row[] & RowDataPacket[]>('SELECT id FROM users WHERE email = ? LIMIT 1', [email]);
      const first = rows && rows[0] ? rows[0] : null;
      return first?.id ?? null;
    };

    // Helper: insert user if not exists, return id
    const upsertUser = async (data: {
      email: string;
      password_hash: string;
      name: string;
      role?: string;
      referrer_id?: string | null;
      referral_code?: string;
      is_active?: number;
      email_verified?: number;
    }): Promise<string> => {
      const existing = await getUserIdByEmail(data.email);
      if (existing) return existing;

      // Insert (id will be generated by DB trigger if left NULL)
      await conn.query(
        `INSERT INTO users (id, email, password_hash, name, role, referrer_id, referral_code, is_active, email_verified, created_at, updated_at)
         VALUES (NULL, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW())`,
        [
          data.email,
          data.password_hash,
          data.name,
          data.role || 'affiliate',
          data.referrer_id || null,
          data.referral_code || generateReferralCode(),
          typeof data.is_active === 'number' ? data.is_active : 1,
          typeof data.email_verified === 'number' ? data.email_verified : 0
        ]
      );

      const newId = await getUserIdByEmail(data.email);
      if (!newId) throw new Error(`Failed to insert user ${data.email}`);
      return newId;
    };

    // 1) Admin user
    const adminPassHash = await bcrypt.hash('AScd3SAsLT25580', 12);
    const adminId = await upsertUser({
      email: 'admin@referalplan.com',
      password_hash: adminPassHash,
      name: 'Admin User',
      role: 'admin',
      referral_code: 'ADMIN001',
      is_active: 1,
      email_verified: 1
    });
    console.log(`✅ Admin ready: admin@referalplan.com (id=${adminId})`);

    // 2) Affiliates (level 1, 2, 3)
    const affiliatePassHash = await bcrypt.hash('password123', 12);

    // Level 1 - John
    const johnId = await upsertUser({
      email: 'john@example.com',
      password_hash: affiliatePassHash,
      name: 'John Smith',
      role: 'affiliate',
      referral_code: 'JOHN2024'
    });

    // Ensure John's affiliate_link
    const [johnLinkRows] = await conn.query<Row[] & RowDataPacket[]>('SELECT id FROM affiliate_links WHERE affiliate_id = ? LIMIT 1', [johnId]);
    let johnLinkId: string | null = (johnLinkRows && johnLinkRows[0] && johnLinkRows[0].id) ? String(johnLinkRows[0].id) : null;
    if (!johnLinkId) {
      await conn.query('INSERT INTO affiliate_links (id, affiliate_id, link_code, clicks, conversions, is_active, created_at, updated_at) VALUES (NULL, ?, ?, 0, 0, 1, NOW(), NOW())', [johnId, 'JOHN2024']);
      const [rows] = await conn.query<Row[] & RowDataPacket[]>('SELECT id FROM affiliate_links WHERE affiliate_id = ? LIMIT 1', [johnId]);
      johnLinkId = rows && rows[0] ? String(rows[0].id) : null;
    }
    console.log(`✅ John ready (id=${johnId}, link=${johnLinkId})`);

    // Level 2 - Sarah (referred by John)
    const sarahId = await upsertUser({
      email: 'sarah@example.com',
      password_hash: affiliatePassHash,
      name: 'Sarah Johnson',
      role: 'affiliate',
      referrer_id: johnId,
      referral_code: 'SARAH2024'
    });

    const [sarahLinkRows] = await conn.query<Row[] & RowDataPacket[]>('SELECT id FROM affiliate_links WHERE affiliate_id = ? LIMIT 1', [sarahId]);
    let sarahLinkId: string | null = (sarahLinkRows && sarahLinkRows[0] && sarahLinkRows[0].id) ? String(sarahLinkRows[0].id) : null;
    if (!sarahLinkId) {
      await conn.query('INSERT INTO affiliate_links (id, affiliate_id, link_code, clicks, conversions, is_active, created_at, updated_at) VALUES (NULL, ?, ?, 0, 0, 1, NOW(), NOW())', [sarahId, 'SARAH2024']);
      const [rows] = await conn.query<Row[] & RowDataPacket[]>('SELECT id FROM affiliate_links WHERE affiliate_id = ? LIMIT 1', [sarahId]);
      sarahLinkId = rows && rows[0] ? String(rows[0].id) : null;
    }
    console.log(`✅ Sarah ready (id=${sarahId}, link=${sarahLinkId})`);

    // Level 3 - Mike (referred by Sarah)
    const mikeId = await upsertUser({
      email: 'mike@example.com',
      password_hash: affiliatePassHash,
      name: 'Mike Wilson',
      role: 'affiliate',
      referrer_id: sarahId,
      referral_code: 'MIKE2024'
    });

    const [mikeLinkRows] = await conn.query<Row[] & RowDataPacket[]>('SELECT id FROM affiliate_links WHERE affiliate_id = ? LIMIT 1', [mikeId]);
    let mikeLinkId: string | null = (mikeLinkRows && mikeLinkRows[0] && mikeLinkRows[0].id) ? String(mikeLinkRows[0].id) : null;
    if (!mikeLinkId) {
      await conn.query('INSERT INTO affiliate_links (id, affiliate_id, link_code, clicks, conversions, is_active, created_at, updated_at) VALUES (NULL, ?, ?, 0, 0, 1, NOW(), NOW())', [mikeId, 'MIKE2024']);
      const [rows] = await conn.query<Row[] & RowDataPacket[]>('SELECT id FROM affiliate_links WHERE affiliate_id = ? LIMIT 1', [mikeId]);
      mikeLinkId = rows && rows[0] ? String(rows[0].id) : null;
    }
    console.log(`✅ Mike ready (id=${mikeId}, link=${mikeLinkId})`);

    // 3) Create sample transactions for John's link (5 transactions)
    if (johnLinkId) {
      for (let i = 1; i <= 5; i++) {
        const customerEmail = `customer${i}@example.com`;
        const amount = 100 + i * 50;

        // Check if a transaction with same customer & amount exists (simple dedupe)
        const [existingTxRows] = await conn.query<Row[] & RowDataPacket[]>('SELECT id FROM transactions WHERE customer_email = ? AND amount = ? LIMIT 1', [customerEmail, amount]);
        let txId: string | null = (existingTxRows && existingTxRows[0] && existingTxRows[0].id) ? String(existingTxRows[0].id) : null;

        if (!txId) {
          await conn.query(
            `INSERT INTO transactions (id, customer_email, amount, affiliate_link_id, referrer_id, status, transaction_type, created_at, updated_at)
             VALUES (NULL, ?, ?, ?, ?, 'completed', 'purchase', NOW(), NOW())`,
            [customerEmail, amount, johnLinkId, johnId]
          );
          const [txRows] = await conn.query<Row[] & RowDataPacket[]>('SELECT id FROM transactions WHERE customer_email = ? AND amount = ? LIMIT 1', [customerEmail, amount]);
          txId = txRows && txRows[0] ? String(txRows[0].id) : null;
        }

        if (txId) {
          const level1Amount = Number((amount * 0.15).toFixed(2));
          const level2Amount = Number((amount * 0.05).toFixed(2));
          const level3Amount = Number((amount * 0.025).toFixed(2));

          // Level1 commission
          const [existsL1] = await conn.query<Row[] & RowDataPacket[]>('SELECT id FROM commissions WHERE affiliate_id = ? AND transaction_id = ? AND level = 1 LIMIT 1', [johnId, txId]);
          if (!(existsL1 && existsL1[0])) {
            await conn.query(
              `INSERT INTO commissions (id, affiliate_id, transaction_id, level, amount, rate, status, created_at, updated_at)
               VALUES (NULL, ?, ?, 1, ?, 15.0, 'paid', NOW(), NOW())`,
              [johnId, txId, level1Amount]
            );
          }

          // Level2 commission
          if (sarahId) {
            const [existsL2] = await conn.query<Row[] & RowDataPacket[]>('SELECT id FROM commissions WHERE affiliate_id = ? AND transaction_id = ? AND level = 2 LIMIT 1', [sarahId, txId]);
            if (!(existsL2 && existsL2[0])) {
              await conn.query(
                `INSERT INTO commissions (id, affiliate_id, transaction_id, level, amount, rate, status, created_at, updated_at)
                 VALUES (NULL, ?, ?, 2, ?, 5.0, 'paid', NOW(), NOW())`,
                [sarahId, txId, level2Amount]
              );
            }
          }

          // Level3 commission
          if (mikeId) {
            const [existsL3] = await conn.query<Row[] & RowDataPacket[]>('SELECT id FROM commissions WHERE affiliate_id = ? AND transaction_id = ? AND level = 3 LIMIT 1', [mikeId, txId]);
            if (!(existsL3 && existsL3[0])) {
              await conn.query(
                `INSERT INTO commissions (id, affiliate_id, transaction_id, level, amount, rate, status, created_at, updated_at)
                 VALUES (NULL, ?, ?, 3, ?, 2.5, 'pending', NOW(), NOW())`,
                [mikeId, txId, level3Amount]
              );
            }
          }
        }
      }

      // Update affiliate link stats (example values)
      await conn.query('UPDATE affiliate_links SET clicks = ?, conversions = ? WHERE id = ?', [25, 5, johnLinkId]);
    }

    // 4) Sample email invites from John
    if (johnId) {
      const invites = [
        { email: 'friend1@example.com', message: 'Check out this great opportunity!', status: 'sent' },
        { email: 'friend2@example.com', message: 'I thought you might be interested in this.', status: 'opened' },
        { email: 'friend3@example.com', message: 'Join me in this amazing program!', status: 'clicked' }
      ];

      for (const inv of invites) {
        const [exists] = await conn.query<Row[] & RowDataPacket[]>('SELECT id FROM email_invites WHERE affiliate_id = ? AND email = ? LIMIT 1', [johnId, inv.email]);
        if (!(exists && exists[0])) {
          await conn.query(
            `INSERT INTO email_invites (id, affiliate_id, email, message, status, sent_at, created_at)
             VALUES (NULL, ?, ?, ?, ?, NOW(), NOW())`,
            [johnId, inv.email, inv.message, inv.status]
          );
        }
      }
    }

    // 5) Seed coordinators
    for (const c of COORDINATORS) {
      const existing = await getUserIdByEmail(c.email);
      if (existing) {
        console.log(`Coordinator exists: ${c.email}`);
        continue;
      }
      const password_hash = await bcrypt.hash(c.password, 12);

      // generate unique referral_code
      let referral_code = generateReferralCode();
      let unique = false;
      while (!unique) {
        const [rows] = await conn.query<Row[] & RowDataPacket[]>('SELECT id FROM users WHERE referral_code = ? LIMIT 1', [referral_code]);
        if (rows && rows[0]) {
          referral_code = generateReferralCode();
        } else {
          unique = true;
        }
      }

      await conn.query(
        `INSERT INTO users (id, email, password_hash, name, role, referral_code, is_active, email_verified, created_at, updated_at)
         VALUES (NULL, ?, ?, ?, ?, ?, 1, 1, NOW(), NOW())`,
        [c.email, password_hash, c.name, c.role, referral_code]
      );
      const newId = await getUserIdByEmail(c.email);
      console.log(`✅ Created coordinator: ${c.name} (${c.email}) - referral: ${referral_code} id=${newId}`);
    }

    // Commit transaction
    await conn.commit();
    console.log('✅ Database seeded successfully!');

    // Log test credentials
    console.log('\n🔑 Test Credentials:');
    console.log('Admin: admin@affiliate.com / admin123');
    console.log('Affiliate 1: john@example.com / password123');
    console.log('Affiliate 2: sarah@example.com / password123');
    console.log('Affiliate 3: mike@example.com / password123');
    console.log('\n🔗 Test Referral Codes: JOHN2024, SARAH2024, MIKE2024');

  } catch (err) {
    try {
      await conn.rollback();
    } catch (e) {
      console.warn('Rollback failed:', e);
    }
    console.error('❌ Seeding failed:', err);
    throw err;
  } finally {
    try {
      conn.release();
    } catch { /* ignore */ }
    try {
      await pool.end();
    } catch { /* ignore */ }
  }
};

// If executed directly
if (require.main === module) {
  seedDatabase()
    .then(() => {
      console.log('Seed script finished.');
      process.exit(0);
    })
    .catch((err) => {
      console.error('Seed script error:', err);
      process.exit(1);
    });
}

export default seedDatabase;
